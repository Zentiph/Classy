-- Classy module by zentiph
-- Enjoy!!!

--[[
A module that aims to make Object-Oriented Programming in Luau more straightforward.

Classy implements many behaviors expected of generic OOP systems, like:
* Easy class creation
* Inheritance
* Constructors
* Private state / encapsulation
* Type safety support
* Meta-method support (__tostring, __add, etc) for extra functionality
* Signal / event patterns
]]
local Classy = {}

--[[
The structure of a class generated by Classy.
]]
export type Class<T> = {
	__index: Class<T>,
	__name: string,
	__base: Class<T>?,

	new: (...any) -> T,
	init: ((self: T, ...any) -> ())?,
	super: (self: T, methodName: string, ...any) -> any,
}

--[[
Generate a new class with Classy.

New classes come with:
* A default .new() method
* A :super() method for calling superclass methods
]]
function Classy:NewClass<T>(className: string, baseClass: Class<any>?): Class<T>
	local class = {} :: any
	class.__name = className
	class.__index = class

	if baseClass then
		setmetatable(class, { __index = baseClass })
		class.__base = baseClass
	end

	--[[
	Construct a new instance of this class.

	... - The arguments to use when constructing an instance
	]]
	function class.new(...: any): any
		local instance = setmetatable({}, class)

		--[[
		Call a superclass's method.

		methodName - The name of the method to call in the superclass
		... - The arguments to pass to the method
		]]
		function instance:super(methodName: string, ...: any): any
			local base = class.__base

			while base do
				local method = (base :: any)[methodName]
				if typeof(method) == "function" then
					return method(self, ...)
				end
				base = base.__base
			end

			error(`Superclass method {methodName} not found in {class.__name}`)
		end

		local init = (instance :: any).Init
		if typeof(init) == "function" then
			init(instance, ...)
		end

		return instance :: T
	end

	return class :: Class<T>
end

-- local Animal = Classy:NewClass("Animal")
-- function Animal:init(name: string, species: string)
-- 	self.Name = name
-- 	self.Species = species
-- end
-- function Animal:Speak(): string
-- 	return `{self.Name} makes whatever noise a {self.Species} makes.`
-- end

-- local fido = Animal.new("Fido", "Dog")
-- fido:Speak()

return Classy
